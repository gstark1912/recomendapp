// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nemesis.DAL;

namespace Nemesis.DAL.Migrations
{
    [DbContext(typeof(NemesisContext))]
    partial class NemesisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nemesis.DAL.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.CapacitiesOffices", b =>
                {
                    b.Property<int>("CapacityId");

                    b.Property<int>("OfficeId");

                    b.HasKey("CapacityId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("CapacitiesOffices");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.CapacitiesSeniorities", b =>
                {
                    b.Property<int>("CapacityId");

                    b.Property<int>("SeniorityId");

                    b.HasKey("CapacityId", "SeniorityId");

                    b.HasIndex("SeniorityId");

                    b.ToTable("CapacitiesSeniorities");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number");

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Capacities");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Initiative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Initiatives");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.ResponsiblesInitiatives", b =>
                {
                    b.Property<int>("InitiativeId");

                    b.Property<string>("UserName");

                    b.HasKey("InitiativeId", "UserName");

                    b.ToTable("ResponsiblesInitiatives");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("Description");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Seniorities");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime?>("End");

                    b.Property<int>("InitiativeId");

                    b.Property<string>("Manager");

                    b.Property<DateTime>("Start");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.TaskMember", b =>
                {
                    b.Property<int>("CapacityId");

                    b.Property<string>("Username");

                    b.Property<int>("Id");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StateId");

                    b.HasKey("CapacityId", "Username");

                    b.HasIndex("StateId");

                    b.ToTable("TaskMembers");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.TaskMemberState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("TaskMemberState");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.TaskResponsibles", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("UserName");

                    b.HasKey("TaskId", "UserName");

                    b.ToTable("TaskResponsibles");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.CapacitiesOffices", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Capacity", "Capacity")
                        .WithMany("CapacitiesOffices")
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nemesis.DAL.Entities.Office", "Office")
                        .WithMany("CapacitiesOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.CapacitiesSeniorities", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Capacity", "Capacity")
                        .WithMany("CapacitiesSeniorities")
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nemesis.DAL.Entities.Seniority", "Seniority")
                        .WithMany("CapacitiesSeniorities")
                        .HasForeignKey("SeniorityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Capacity", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Task")
                        .WithMany("Capacities")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.ResponsiblesInitiatives", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Initiative", "Initiative")
                        .WithMany("ResponsiblesInitiatives")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Seniority", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.Task", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Initiative", "Initiative")
                        .WithMany("Tasks")
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nemesis.DAL.Entities.TaskStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.TaskMember", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nemesis.DAL.Entities.TaskMemberState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nemesis.DAL.Entities.TaskResponsibles", b =>
                {
                    b.HasOne("Nemesis.DAL.Entities.Task")
                        .WithMany("Responsibles")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
